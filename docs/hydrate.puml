@startuml

class Configuration {
    getConnection
}

class Session {

    save(subject: any)
    remove(subject: any)
    find(type: Type, id: ObjectID, callback: Callback<any>)
    query(type: Type): QueryBuilder
    flush(callback: ErrorCallback)
    lock(subject: any, mode: LockMode, callback: ErrorCallback)
    unlock(subject: any, callback: ErrorCallback)
    close()
}
Session <-- Configuration
Session *-- UnitOfWork

class UnitOfWork {
    config: Configuration
    registerNew(subject: any)
    registerClean(subject: any)
    registerRemoved(subject: any)
    getById(id: ObjectID): any
    flush(callback: ErrorCallback)
    getMapper(type: Type): DocumentMapper;
}

UnitOfWork *-- DocumentMapper : mappers

class DocumentMapper {
    insert(subjects: any[], callback: ErrorCallback)
    update(subjects: any[], callback: ErrorCallback)
    delete(subjects: any[], callback: ErrorCallback)
    load(document: Document): any;
    findOne(criteria, Callback<any>, mode: LockMode)
    find(criteria, Callback<Cursor>)
    lock(subject: any, mode: LockMode, callback: ErrorCallback)
    unlock(subject: any, callback: ErrorCallback)
}

UnitOfWork <-- DocumentMapper : uow
UnitOfWork <-- Configuration
DocumentMapper <-- DocumentSerializer : serializer

class Cursor {
}

Cursor <-- DocumentMapper : mapper
Cursor <-- UnitOfWork : uow


class DocumentSerializer {
    read(document: Document): any;
    write(subject: any): Document;
}

UnitOfWork --> DocumentSerializer : uow

interface Document {
    _id: ObjectID
}

@enduml
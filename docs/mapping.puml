@startuml

interface Type {

    kind: TypeKind
    properties: Symbol[]
}
Type *-- TypeKind : kind
Type *-- Symbol : properties

enum TypeKind {
    Any,
    String,
    Number,
    Boolean,
    Enum,
    Class,
    Interface,
    Tuple,
    Anonymous,
    Array,
    Reference
}

interface Symbol {
    name: string
    type: Type
}
Symbol <-- Type : type

interface TypeMapping {

    type: Type
    db: string
    collection: string
    collectionOptions: CollectionOptions
    indexes: Index[]
    inheritanceType: InheritanceType
    discriminatorField: string
    discriminatorMap: Map<TypeMapping>
    discriminatorValue: string
    changeTracking: ChangeTracking
    isVersioned: boolean
    versionField: string
    isLockable: boolean
    lockField: string
}
TypeMapping <-- Type
TypeMapping *-- PropertyMapping
TypeMapping *-- Index

interface PropertyMapping {

    symbol: Symbol
    name: string
    field: string
    cascade: Cascade
    ignored: boolean
    inverseOf: string
}
PropertyMapping <-- Symbol
PropertyMapping *-- Cascade

enum Cascade {
    None
    Save
    Remove
    Detach
    All
}

interface Index {
    fields: Map<number>
    options: IndexOptions
}

@enduml